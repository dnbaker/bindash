/*
 * Copyright [2018] [XiaoFei Zhao]
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef BHMATH_HPP
#define BHMATH_HPP

#include "extmath/ibeta.h"

#include <cmath>
#include <algorithm>

#include <float.h>
#include <math.h>
#include <stdint.h>
#include <stdlib.h>


double bhmath_calc_entropy(const uint64_t *freqs, size_t n) {
	uint64_t freqsum = 0;
	for (size_t i = 0; i < n; i++) {
		freqsum += freqs[i];
	}
	double ret = 0;
	for (size_t i = 0; i < n; i++) {
		if (0 < freqs[i]) {
			double p = (double)freqs[i] / (double)freqsum;
			ret -= p * log(p);	
		}
	}
	return ret;
}

double bhmath_matchprob(unsigned int kmerlen, double entropy, uint64_t genomesize) {
	double delta = pow(1.0 / exp(entropy), kmerlen);
	// return 1 - pow(1 - delta, genomesize)
	// return 1 - pow(1 + delta, -genomesize)
	// return 1 - pow(1 + delta, 1 / delta * delta * -genomesize)
	return 1 - exp(-delta * genomesize);
}

double bhmath_jaccard(double p1, double p2) {
	return p1 * p2 / (p1 + p2 - p1 * p2);
}

double bhmath_jaccard_to_dice(double jaccard) {
	return 2.0 * jaccard / (1.0 + jaccard);
}

double bhmath_dice_to_jaccard(double dice) {
	return dice / (2.0 - dice);
}

// The following are generated by the command "pnorm(seq(0, 299)/20, 0, 1, lower.tail=TRUE)" in "R version 3.2.3 (2015-12-10)"
const double NORMTABLE20TAIL[300] = {
0.5, 0.480061194161628, 0.460172162722971, 0.440382307629757, 0.420740290560897, 
0.401293674317076, 0.382088577811047, 0.363169348824381, 0.344578258389676, 0.32635522028792, 
0.308537538725987, 0.291159686788346, 0.274253117750074, 0.257846110805865, 0.241963652223073, 
0.226627352376868, 0.211855398583397, 0.197662543122692, 0.18406012534676, 0.171056126308482, 
0.158655253931457, 0.146859056375896, 0.135666060946383, 0.12507193563715, 0.115069670221708, 
0.105649773666855, 0.0968004845856103, 0.088507991437402, 0.0807566592337711, 0.0735292596096484, 
0.0668072012688581, 0.060570758002059, 0.054799291699558, 0.0494714680336481, 0.044565462758543, 
0.0400591568638171, 0.0359303191129258, 0.0321567747956137, 0.0287165598160018, 0.0255880595216386, 
0.0227501319481792, 0.0201822154057044, 0.0178644205628166, 0.0157776073910905, 0.0139034475134986, 
0.0122244726550447, 0.0107241100216758, 0.00938670553483857, 0.00819753592459613, 0.00714281073527142, 
0.00620966532577613, 0.00538614595406669, 0.00466118802371875, 0.00402458854275831, 0.00346697380304067, 
0.00297976323505456, 0.00255513033042793, 0.00218596145491324, 0.00186581330038404, 0.00158886964736487, 
0.00134989803163009, 0.0011442068310227, 0.000967603213218356, 0.000816352312828562, 0.000687137937915848, 
0.000577025042390767, 0.000483424142383777, 0.000404057801864021, 0.000336929265676881, 0.000280293276816177, 
0.000232629079035525, 0.000192615575635633, 0.000159108590157534, 0.000131120154420485, 0.000107799733477388, 
8.84172852008039e-05, 7.23480439251201e-05, 5.90589124189225e-05, 4.80963440176027e-05, 3.90755965977875e-05, 
3.16712418331199e-05, 2.56088164740415e-05, 2.06575069125468e-05, 1.66237637296522e-05, 1.33457490159063e-05, 
1.06885257749344e-05, 8.53990547099181e-06, 6.80687659933406e-06, 5.41254390770385e-06, 4.29351446997187e-06, 
3.39767312473006e-06, 2.68229577963886e-06, 2.11245470250285e-06, 1.65967514437146e-06, 1.30080745391728e-06, 
1.0170832425687e-06, 7.93328151975595e-07, 6.17307372009198e-07, 4.79183276590319e-07, 3.71067407963333e-07, 
2.86651571879194e-07, 2.20905032269544e-07, 1.6982674071476e-07, 1.30243229533201e-07, 9.96442631693347e-08, 
7.60496051648871e-08, 5.79013403996459e-08, 4.3977115940059e-08, 3.33204484854285e-08, 2.51849100544611e-08, 
1.89895624658877e-08, 1.42834798939228e-08, 1.07175902583109e-08, 8.0223918506635e-09, 5.99037140106353e-09, 
4.46217245390161e-09, 3.31574597832617e-09, 2.45786506180803e-09, 1.81750786309943e-09, 1.34071244409187e-09, 
9.86587645037698e-10, 7.24229170513764e-10, 5.30342326294884e-10, 3.87414734667567e-10, 2.82315803704327e-10, 
2.05226342521894e-10, 1.48822822176231e-10, 1.07657463851216e-10, 7.76884758170981e-11, 5.59250757594268e-11, 
4.01600058385912e-11, 2.87685417360433e-11, 2.05578890939952e-11, 1.46546509773028e-11, 1.04209769879652e-11, 
7.39225777801782e-12, 5.23095754414459e-12, 3.69249942723561e-12, 2.60012696563817e-12, 1.82643106197696e-12, 
1.27981254388584e-12, 8.94588955876992e-13, 6.23784446333159e-13, 4.33889502717806e-13, 3.01062798111743e-13, 
2.08385815867207e-13, 1.43883863815759e-13, 9.91034274954757e-14, 6.80922489062002e-14, 4.66701158871903e-14, 
3.1908916729109e-14, 2.17629120970858e-14, 1.48065374900481e-14, 1.00489656565263e-14, 6.80331154077396e-15, 
4.5946274357786e-15, 3.0953587719587e-15, 2.08018635213939e-15, 1.39451714665926e-15, 9.32557577168123e-16, 
6.22096057427178e-16, 4.13970181627315e-16, 2.74795939239823e-16, 1.81962136352663e-16, 1.20193515427359e-16, 
7.91972631464248e-17, 5.20556974489026e-17, 3.41314832645815e-17, 2.23239319728804e-17, 1.45651411259094e-17, 
9.47953482220332e-18, 6.15442559085038e-18, 3.98580496284818e-18, 2.57497153801189e-18, 1.65942086996478e-18, 
1.06676373754749e-18, 6.84080768593555e-19, 4.37596479930904e-19, 2.79233437493965e-19, 1.77741178414554e-19, 
1.12858840595384e-19, 7.1484170112697e-20, 4.51659149143546e-20, 2.84667740846022e-20, 1.78974881201405e-20, 
1.1224633591328e-20, 7.02228424044163e-21, 4.38238629906651e-21, 2.72815357134612e-21, 1.69415350248814e-21, 
1.04945150753626e-21, 6.48481445307726e-22, 3.99722120572624e-22, 2.45778648347233e-22, 1.5074931688102e-22, 
9.22341352493942e-23, 5.62928231137653e-23, 3.42719879411367e-23, 2.08137521949321e-23, 1.26091606702069e-23, 
7.61985302416053e-24, 4.59337105561296e-24, 2.76210947176452e-24, 1.65681711680267e-24, 9.91362512256007e-25, 
5.91717690736562e-25, 3.52306507892641e-25, 2.09242903757842e-25, 1.239665979584e-25, 7.32626143174429e-26, 
4.31900631780923e-26, 2.53985474308407e-26, 1.48990112729648e-26, 8.71825291966573e-27, 5.08891085502732e-27, 
2.96308087809436e-27, 1.72101783947978e-27, 9.97126740930672e-28, 5.76286441383559e-28, 3.32238081981654e-28, 
1.91065957449868e-28, 1.09607441199641e-28, 6.27219439321705e-29, 3.58031843131026e-29, 2.03866750354489e-29, 
1.15796031856864e-29, 6.56089994090416e-30, 3.70813505418165e-30, 2.09059542173855e-30, 1.17572757000196e-30, 
6.59577144611367e-31, 3.69102185890369e-31, 2.06039123615879e-31, 1.14729411076973e-31, 6.37267491568616e-32, 
3.53094239588599e-32, 1.95155729316955e-32, 1.07595404604104e-32, 5.91735771630608e-33, 3.24626185772666e-33, 
1.77648211207768e-33, 9.69749658013094e-34, 5.28055876743356e-34, 2.86827981883681e-34, 1.55411978638961e-34, 
8.39979606363342e-35, 4.52870695615879e-35, 2.43557140667721e-35, 1.30661798312463e-35, 6.99225823301245e-36, 
3.73256429887771e-36, 1.98755015060811e-36, 1.05572255808865e-36, 5.59374113081685e-37, 2.95648536485205e-37, 
1.5587262888812e-37, 8.19756171316293e-38, 4.30051225029159e-38, 2.25048589341506e-38, 1.17477031818436e-38, 
6.11716439954988e-39, 3.17737014468944e-39, 1.64628830695087e-39, 8.50872242451933e-40, 4.38675271307425e-40, 
2.25601633968579e-40, 1.15734162836903e-40, 5.92244602045204e-41, 3.02315773594517e-41, 1.53936150237679e-41, 
7.81880730565789e-42, 3.96150704499511e-42, 2.0021672236815e-42, 1.00939282671678e-42, 5.07621481159788e-43, 
2.54647631597396e-43, 1.27426314550684e-43, 6.36060456594686e-44, 3.16706826813078e-44, 1.57302697148052e-44, 
7.7935368191928e-45, 3.85170178073225e-45, 1.89884852122918e-45, 9.33786420169816e-46, 4.58062055189479e-46, 
2.24140623269364e-46, 1.0940477870189e-46, 5.32686183339078e-47, 2.58717592540225e-47, 1.25342930556679e-47, 
6.05749476441522e-48, 2.92015252810089e-48, 1.40422686696265e-48, 6.73578535018496e-49, 3.22298575774484e-49, 
1.53832354650685e-49, 7.32413111982709e-50, 3.47843284602968e-50, 1.6478974977e-50, 7.78745933872055e-51
};

#if 0

// this is not accurate
double bhmath_erf(double z) {
	double t = 1.0 / (1.0 + 0.5 * abs(z));
	return 1 - t * exp(-z*z -  1.26551223 +
		           t * ( 1.00002368 +
                                t * ( 0.37409196 + 
                                     t * ( 0.09678418 + 
                                          t * (-0.18628806 + 
                                               t * ( 0.27886807 + 
                                                    t * (-1.13520398 + 
                                                         t * ( 1.48851587 + 
                                                              t * (-0.82215223 + 
                                                                   t * ( 0.17087277))))))))));
}

int NORMTABLE_SIZE;

void NORMTABLE_init(size_t size) {
	NORMTABLE = (double*)malloc(size * sizeof(double));
	for (unsigned int i = 0; i < size; i++) {
		NORMTABLE[i] = bhmath_stdnorm_ccdf(i * 10 / size);
	}
	NORMTABLE_SIZE = size;
}
#endif

double bhmath_ppois_tail(unsigned int x, double lambda) {	
	double currpmf = exp(-lambda);
	double currtail = 1.0 - currpmf;
	unsigned int upperlimit = std::min(x, (unsigned int)((lambda + 1) * 2));
	unsigned int i = 1;	
	for (; i <= upperlimit; i++) {
		currpmf = currpmf * lambda / i;
		currtail -= currpmf;
	}
	return currtail * std::pow(lambda / (x+i) * 2, x-(i-1));
}

double bhmath_pbinom_tail_notaccurate(unsigned int x, unsigned int n, double p) {
	double mean = n * p;
	if (5 < mean && 5 < n - mean) {
		// normal approx
		double var = n * p * (1 - p);
		double z = (x - mean) / sqrt(var);
		int idx = (int)(z * 20);
		if (idx >= 300) { return 0; }
		else if (-idx >= 300) { return 1; }
		else if (idx < 0) { return 1 - NORMTABLE20TAIL[-idx]; }
		else { return NORMTABLE20TAIL[idx]; }
	} else if (mean <= 5) {
		// poisson approx
		return bhmath_ppois_tail(x, mean);
	} else {
		return bhmath_ppois_tail(n - x, n - mean);
	}
}

double bhmath_pbinom_tail(unsigned int x, unsigned int n, double p) {
	return incbeta(x, n + 1 - x, p);
}

#if 0
double bhmath_relative_entropy(double a, double p) {
	return 
}

double bhmath_pbinom_tail_upper(unsigned int x, unsigned int n, double p) {
	return exp(-n * bhmath_relative_entropy((double)x/(double)n, p));
}

double bhmath_pbinom_tail(unsigned int x, unsigned int n, double p) {
	double mean = n * p;
	if (mean <= p) { return 1; } // below chance level
		
	double var = n * p * (1 - p);
	double z = (x - mean) / sqrt(var);
	int idx = (int)(z * 20);
	if (idx >= 300) { return bhmath_pbinom_tail_approx(x, n, p); }

	if (5 < mean && 5 < n - mean) {
		// normal approx
		double var = n * p * (1 - p);
		double z = (x - mean) / sqrt(var);
		int idx = (int)(z * 20);
		if (idx >= 300) { return 0; }
		else if (-idx >= 300) { return 1; }
		else if (idx < 0) { return 1 - NORMTABLE20TAIL[-idx]; }
		else { return NORMTABLE20TAIL[idx]; }
	} else if (mean <= 5) {
		// poisson approx
		return bhmath_ppois_tail(x, mean);
	} else {
		return bhmath_ppois_tail(n - x, n - mean);
	}
}
#endif

#endif

